{"version":3,"sources":["components/socket.tsx","components/Map.tsx","App.tsx","components/InfoTypes.tsx","reportWebVitals.ts","index.tsx"],"names":["socket","io","path","on","console","log","connected","truckIcon","L","icon","iconUrl","iconSize","truckIcon1","trucksIcons","Array","startIcon","destinationIcon","App","useState","trucks","setTrucks","trucksInfo","setTrucksInfo","trucksStatus","setTrucksStatus","truckToFix","setTruckToFix","chat","setChat","mensaje","setMensaje","username","setUsername","useEffect","emit","trucksInfoUpdated","failureInfo","source","concat","failedTruck","find","found","code","secondaryList","indexOf","fixInfo","newStatus","fixedTruck","min","max","newTruck","position","iconInt","Math","floor","random","newTruckStatus","sameTruck","off","className","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","map","camion","Marker","Popup","trayecto","Polyline","positions","origin","destination","onSubmit","e","preventDefault","type","value","placeholder","onChange","target","name","message","date","MensajeEnviar","handleSendChat","info","truck","engine","capacity","staff","persona","age","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90c48956.chunk.js","sourcesContent":["import { io } from \"socket.io-client\";\r\n\r\nconst socket = io(\"wss://tarea-3-websocket.2021-2.tallerdeintegracion.cl\", {\r\n  path: \"/trucks/\",\r\n});\r\n\r\nsocket.on(\"connect\", function() {\r\n  console.log('check connection', socket.connected)\r\n});\r\n\r\nexport default socket;","import L from 'leaflet'\r\n\r\nvar truckIcon = L.icon({\r\n    iconUrl: 'https://sunshine-autos.ucoz.com/_ld/0/75951138.png',\r\n    iconSize:     [58, 49], \r\n  });\r\n\r\nvar truckIcon1 = L.icon({\r\n    iconUrl: 'https://i.imgur.com/puSMlJB.png',\r\n    iconSize:     [58, 49], \r\n  });\r\n\r\n\r\nexport var trucksIcons = new Array();\r\ntrucksIcons[0] = truckIcon;\r\ntrucksIcons[1] = truckIcon1;\r\n\r\n\r\nexport var startIcon = L.icon({\r\n    iconUrl: 'https://pixelartmaker-data-78746291193.nyc3.digitaloceanspaces.com/image/18e8ade00a66467.png',\r\n    iconSize: [45,30],\r\n});\r\n\r\nexport var destinationIcon = L.icon({\r\n    iconUrl: 'https://cdn.picpng.com/flag/flag-icon-flag-icon-destination-53089.png',\r\n    iconSize: [45,30],\r\n});","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {MapContainer, TileLayer, Marker, Popup, Polyline} from 'react-leaflet'\nimport socket from \"./components/socket\"\nimport {TruckInfo, TruckStatus, TruckPos, getRandomInt, failureInfo, chatMessage } from './components/InfoTypes';\nimport {trucksIcons, startIcon, destinationIcon} from './components/Map';\nimport { stringify } from 'querystring';\nimport { debug, info } from 'console';\n\nfunction App() {\n  // Camiones\n  const [trucks, setTrucks] = useState<TruckPos[]>([]);\n  const [trucksInfo, setTrucksInfo] = useState<TruckInfo[]>([]);\n  const [trucksStatus, setTrucksStatus] = useState<TruckStatus[]>([]);\n  const [truckToFix, setTruckToFix] = useState(\"\")\n\n\n\t// CHAT\n\tconst [ chat, setChat ] = useState<chatMessage[]>([])\n  const [mensaje, setMensaje] = useState(\"\")\n\n  const [username, setUsername] = useState(\"defaultUser\")\n\n  useEffect(() => {\n    socket.emit('TRUCKS');\n    socket.emit('CHAT');\n    // socket.emit('FIX'); DEBE PODER EMITIRSE Y ARREGLAR EL CAMION -> \n\n    socket.on('TRUCKS', trucksInfoUpdated => { // Posiciones de los camiones\n      //console.log(trucksInfoUpdated);\n      setTrucksInfo(trucksInfoUpdated);\n    });\n    \n    socket.on('FAILURE', (failureInfo: {code: string, source:string}) => {\n      //console.log(failureInfo);\n      failureInfo.source = \"Falla de \".concat(failureInfo.source);\n      // Crear otro useState con una lista que tenga code y status solamente, luego mapear eso en render\n      var failedTruck = trucksStatus.find(found => found.code === failureInfo.code)!\n      if (typeof(failedTruck) !== \"undefined\") { \n        var secondaryList = trucksStatus;\n        secondaryList[secondaryList.indexOf(failedTruck)] = failureInfo;\n        setTrucksStatus(secondaryList);\n      }else{\n        setTrucksStatus([...trucksStatus, failureInfo])\n      }\n    })\n\n    socket.on('CHAT', (mensaje: {date:string, message: string, name: string})=>{\n      //console.log(mensaje);\n      setChat([...chat, mensaje])\n    })\n    \n    socket.on('FIX', (fixInfo: {code: string}) => {\n      //console.log(fixInfo);\n      \n      const newStatus = {\n        code: fixInfo.code,\n        source: 'OK',\n      }\n      var fixedTruck = trucksStatus.find(found => found.code === fixInfo.code)!\n      var secondaryList = trucksStatus;\n      secondaryList[trucksStatus.indexOf(fixedTruck)] = newStatus;\n      setTrucksStatus(secondaryList);\n\n    })\n    \n    socket.on('POSITION', mensaje => {\n      //sole.log(mensaje);\n      const newTruck = {\n        code: mensaje.code,\n        position: mensaje.position,\n        iconInt: getRandomInt(0,2),\n      }\n      const newTruckStatus = {\n        code: mensaje.code,\n        source: \"OK\",\n      }\n      var sameTruck = trucks.find(found => found.code === newTruck.code);\n      if (typeof(sameTruck) !== \"undefined\") { // si existe, actualizar datos\n        var secondaryList = trucks;           //updated list\n        secondaryList[secondaryList.indexOf(sameTruck)] = newTruck; //asignar\n        setTrucks(secondaryList);\n      }else{\n        setTrucksStatus([...trucksStatus, newTruckStatus])\n        setTrucks([...trucks, newTruck])\n      }\n    });\n\n\n    return () => {socket.off()}\n  }, [trucks, trucksInfo]);\n\n\n  const handleSendChat = () => {\n\n    const MensajeEnviar = {\n      message: mensaje,\n      name: username,\n    }\n    socket.emit(\"CHAT\", MensajeEnviar);\n    //setChat(prev => [...prev, {msj,name}]);\n\n    setMensaje(\"\");\n  };\n\n  const handleChangeUsername = () => {\n    setUsername(username);\n  }\n  \n\n  const handleFixTruck = () =>{\n    socket.emit('FIX', {code: truckToFix});\n  }\n\n  return (\n\n    <>\n    <div className = \"overall\">\n    \n    <div className=\"map-chat\">\n\n      <div className=\"map\">\n      <MapContainer center={[-22, -68.5]} zoom={10} scrollWheelZoom={true}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          />\n\n        {trucks.map((camion) => (\n          <Marker position={[camion.position[0],camion.position[1]]} icon = {trucksIcons[camion.iconInt]}>\n          <Popup>\n            {camion.code} \n          </Popup>\n          </Marker> \n        ))}\n\n        {trucksInfo.map((trayecto) => (\n          <>\n          <Polyline positions={[[trayecto.origin[0], trayecto.origin[1]],[trayecto.destination[0], trayecto.destination[1]]]} />\n          <Marker position={[trayecto.origin[0], trayecto.origin[1]]} icon = {startIcon}> <Popup> {trayecto.code} </Popup> </Marker>  \n          <Marker position={[trayecto.destination[0], trayecto.destination[1]]} icon = {destinationIcon}> <Popup>{trayecto.code}</Popup></Marker>\n          </>\n        ))}\n      </MapContainer>\n      </div>\n      \n      <div className= \"chat-box\">\n        <p className=\"p1\"> Chat </p>\n        <br/>\n        <p> Nombre de usuario: </p>\n        <form onSubmit={e => {\n          e.preventDefault()\n          handleChangeUsername();\n        }}>\n          <input \n            type=\"text\" \n            value= {username} \n            placeholder= 'Username' \n            onChange = {e=> setUsername(e.target.value)}\n          />\n          <button type= \"submit\"> Cambiar </button>\n        </form>\n\n        <div className= \"chat-container\">\n          {chat.map((mensaje)=>\n          <div className=\"msj-container\"> \n            <div><p className = \"user-name\"> {mensaje.name} </p></div>\n            <div className=\"msj-text\">\n              <h3>{mensaje.message} </h3>\n              <p> Date: {mensaje.date} </p>\n              <br></br>\n            </div>\n          </div>\n          )}\n          \n        </div>\n\n        <br/>\n        <form onSubmit= {e => {\n          e.preventDefault()\n          handleSendChat();\n        }}>\n          <input\n            type= \"text\"\n            value = {mensaje}\n            placeholder= 'Ingresa un mensaje'\n            onChange= {e => setMensaje(e.target.value)}\n          />\n          <button type= \"submit\"> ENVIAR </button>\n        </form>\n      </div>\n    </div> \n    \n\n\n    <div className=\"infobox\">\n      <p className=\"p1\"> Información de los camiones</p>\n      <br/>\n      <div className=\"card-container\">\n      {trucksInfo.map((info)=>\n        \n        <div className=\"card\">\n          <div className=\"card-title\"><h1> Codigo: {info.code}</h1></div>\n\n          <div className='truckinfo-text'>\n            <div><h3> Truck: {info.truck}</h3></div>\n            <div><h3> Engine: {info.engine}</h3></div>\n            <div><h3> Capacidad: {info.capacity}</h3></div>\n            <div><h3> Origen: {info.origin}</h3></div>\n            <div><h2>Destino: </h2><h3> {info.destination}</h3></div>\n            <div><h3> Estatus: {\n              trucksStatus.find(found => found.code === info.code)?.source \n              }</h3>\n              <form\n                onSubmit={e => {\n                  setTruckToFix(info.code)\n                  handleFixTruck()\n                }}\n              >\n              <button type=\"submit\"> FIX </button>\n              </form>\n            </div>\n            <h2> Operadores</h2>\n            {info.staff.map((persona)=>\n            <div><h3> {persona.name}, {persona.age} años</h3></div>\n            )}\n          </div>\n        </div>\n      )}\n      </div>\n    </div>\n\n    </div>\n  </>\n\n  );\n}\n\nexport default App;\n","\r\n\r\ninterface people {\r\n  name: string;\r\n  age: number;\r\n}\r\n  \r\ninterface chatMessage {\r\n  date: string;\r\n  message: string;\r\n  name: string;\r\n}\r\n\r\ninterface failureInfo{\r\n  code: string;\r\n  source: string;\r\n}\r\n\r\ninterface TruckInfo {\r\n  code: string;\r\n  origin: number[];\r\n  destination: number[];\r\n  driver_name: string;\r\n  engine: string;\r\n  capacity: number;\r\n  status: string;\r\n  truck: string;\r\n  staff: people[];\r\n}\r\n\r\ninterface TruckStatus {\r\n  code: string;\r\n  source: string;\r\n}\r\n\r\ninterface TruckPos {\r\n  code: string;\r\n  position: number[];\r\n  iconInt: number;\r\n}\r\n\r\nexport function getRandomInt(min: number, max: number) {\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nexport type { TruckInfo, TruckPos, chatMessage, failureInfo, TruckStatus}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}